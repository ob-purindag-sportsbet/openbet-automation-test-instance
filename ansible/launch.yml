---
# The play operates on the local (Ansible control) machine and initialises
# resources such as Security Groups and EC2 instances.
- name: Running launch playbook for {{ project_name }}
  hosts: localhost
  connection: local
  gather_facts: false

  # Common variables that apply to both local and AWS
  vars_files:
    - group_vars/ec2.yml
  # vars:
  #   ansible_ssh_private_key_file: "{{ keypair_path }}"

  tasks:
    - name: Configure EC2 Security Group (AWS only)
      ec2_group:
        name: "{{ project_label }}-sg"
        description: Security Group for {{ project_name }} Servers
        state: present
        vpc_id: "{{ vpc_id }}"
        rules: "{{ security_group.incoming_rules }}"
        rules_egress: "{{ security_group.outgoing_rules }}"
      when: target == 'aws'

    - name: Launch EC2 instances (AWS only)
      ec2_instance:
        key_name: "{{ keypair }}"
        security_groups: "{{ project_label }}-sg"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ec2.image }}"
        vpc_subnet_id: "{{ subnet }}"
        instance_initiated_shutdown_behavior: stop
        tags: "{{ instance_tags }}"
        wait: true
        state: running
      register: ec2_provisions
      when: target == 'aws'

    - name: Add running instances to the 'launched' group (AWS only)
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: launched
      loop: "{{ ec2_provisions.instances }}"
      when: target == 'aws'

    - name: Wait for SSH to be available (AWS only)
      wait_for:
        host: "{{ item.public_ip_address }}"
        port: 22
        delay: 10
        connect_timeout: 20
        timeout: 300
        state: started
      loop: "{{ ec2_provisions.instances }}"
      when: target == 'aws'

    - name: Add local machine to the 'launched' group (Local only)
      add_host:
        hostname: "{{ instance.machine_ip }}"
        groupname: launched
      when: target == 'local'

- name: Base image setup
  hosts: launched
  become: yes
  gather_facts: false
  roles:
    - { role: pre, tags: pre }

- name: Configure common packages and docker engine
  hosts: launched
  become: yes
  gather_facts: true
  roles:
    - { role: common, tags: common }
    - { role: docker, tags: docker }

- name: Configure OpenBet stack
  hosts: launched
  become: no
  gather_facts: true
  roles:
    - { role: stack, tags: stack }

# - name: Start up the Openbet Applications stack
#   hosts: launched
#   become: yes
#   gather_facts: true
#   roles:
#     - { role: apps, tags: stack }